<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sin-coder</title>
    <link>https://sin-coder.github.io/</link>
    <description>Recent content on sin-coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jan 2020 21:35:45 +0800</lastBuildDate>
    
	<atom:link href="https://sin-coder.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>同步/异步、阻塞/非阻塞辨析</title>
      <link>https://sin-coder.github.io/post/syn/</link>
      <pubDate>Sun, 26 Jan 2020 21:35:45 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/syn/</guid>
      <description>关键词：同步、异步、阻塞、非阻塞 相关概念：网络编程、进程与线程、I/O模型 一、问题背景 同步和异步，以及阻塞和非阻塞都是网络编程中经常遇到的概念，单看文字上的解释，确实有些晦涩难懂。接下来我们将从一个通俗的例子出发阐述它们的区别与联系
二、一个简单的例子 隔壁老王爱好茶艺，每天都会煮开水来泡茶
场景一：老王将水壶放在火上，坐在旁边等待水开 （同步阻塞）
​ 但是这样很耽搁时间，又不自由，效率很低，老王想要改变
场景二：老王将水壶放在火上，自已去隔壁了，每隔3分钟来看下水开没有 （同步非阻塞）
​ 但是这样依旧很麻烦，老王就买了一个自动报警的水壶
场景三： 老王用新买的水壶进行烧水，坐在旁边等待水开 （异步阻塞）
​ 老王便想没有必要在水壶旁边坐着啊
场景四： 老王新买的水壶放在火上，自己去隔壁了，等着报警再回来 （异步非阻塞）
​ 这种方式是最让老王省心的
小结： 同步和异步关注的焦点在于我们是否需要不断地去看水壶是否开了，同步时，需要老王不断地去轮询水壶是
​ 否开了，效率是比较低下的。而异步时，水壶告警提醒老王它开了。
​ 阻塞和非阻塞 关注的焦点在于老王是否需要坐在水壶旁边等待，在水壶旁边等待老王就是阻塞的，去做其他
​ 事的老王就是非阻塞的。
​ 这个例子可以帮助我们初步地理解同步异步、阻塞和非阻塞之间的联系和区别，但是如果详细的“追究”起来，
​ 还有许多未解释的细节
三、理论阐述 1.同步与异步 同步和异步（syn &amp;amp; asyn），描述的是在单线程中一次方法调用后，执行者是否具备主动通知的功能。同步时调用者会等到方法调用返回后才能继续后面的行为，异步时调用者不需要等到方法返回，方法执行完毕后会主动通知调用者
2.阻塞和非阻塞 阻塞和非阻塞关注是调用者是否可以执行多个任务，描述的是调用者的多个线程是否可以同时执行。阻塞时，多个线程不能同时进行；非阻塞时，多个线程可以同时进行
3.二者的区别与联系 同步和阻塞完全是在单线程和多线程这两个维度上的概念，它们之间并没有强制的联系。但是从实际的意义来看确实有一定的绑定关系，比如对于单线程来说，不管是同步还是异步，肯定是阻塞的，非阻塞只有多线程而且异步的时候才能发挥作用。
回来继续看烧水的例子，老王在烧水的同时去隔壁，也即在烧水这个线程之中，又开启了去隔壁这个线程，所以使用异步非阻塞才更加有意义</description>
    </item>
    
    <item>
      <title>基于Hugo框架搭建个人博客</title>
      <link>https://sin-coder.github.io/post/hugo/</link>
      <pubDate>Tue, 07 Jan 2020 14:08:20 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/hugo/</guid>
      <description>关键词：Hugo 、Git、Github、域名解析 内容摘要： 1.前期准备 安装Hugo、Git，注册Github,购买域名(可选)
2.Hugo框架的搭建、测试步骤 3.Hugo框架部署在Github上 4.绑定域名 概述 1.Hugo简介 Hugo是基于Go语言开发的静态网站生成器，简单、易用、快速部署，主要用于构建个人博客
2.Git简介 Git是目前主流的分布式版本控制工具，有关Git的使用请查看Git的来龙去脉这篇文章
3.Github简介 Github是在外网环境下的一个代码托管库，有关Github的介绍请查看开始玩起Github这篇文章
具体过程 1.准备工作  下载Git并安装、配置环境变量  完成后在终端执行&amp;rdquo;git&amp;rdquo;命令来测试是否安装成功，有关git的安装请看Git的来龙去脉
 下载Hugo并安装、配置环境变量  完成后在终端执行&amp;rdquo;hugo version&amp;rdquo;命令来测试是否安装成功，终端提示如下信息表示安装成功
C:\Users\Administrator&amp;gt;hugo version Hugo Static Site Generator v0.59.1-D5DAB232 windows/amd64 BuildDate: 2019-10-31T15:22:43Z  Hugo最好安装在英文目录下
下载时可能由于网络问题失败，附上Hugo、Git、主题m10c的下载包链接: 下载链接
 注册Github官网（已有账号请忽略）  2.生成个人站点 （1）在终端执行命令 C:\Users\Administrator&amp;gt;hugo new site E:\hugo\Sites\myblog  出现以下提示信息表示创建成功：
C:\Users\Administrator&amp;gt;hugo new site E:\hugo\Sites\myblog Congratulations! Your new Hugo site is created in E:\hugo\Sites\myblog. Just a few more steps and you&#39;re ready to go: 1.</description>
    </item>
    
  </channel>
</rss>