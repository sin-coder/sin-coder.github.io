<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云计算 on sin-coder</title>
    <link>https://sin-coder.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/</link>
    <description>Recent content in 云计算 on sin-coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Feb 2020 22:17:53 +0800</lastBuildDate>
    
	<atom:link href="https://sin-coder.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 镜像详解</title>
      <link>https://sin-coder.github.io/post/docker-image/</link>
      <pubDate>Sun, 02 Feb 2020 22:17:53 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/docker-image/</guid>
      <description>Docker 镜像详解  镜像是Docker三大核心概念中最为重要的。Docker运行容器前需要本地存在对应的镜像，如果镜像不
 存在，Docker会从Docker Hub中下载，当然用户也可以配置自定义的镜像仓库
关键问题  使用pull命令从Docker Hub中下载镜像到本地 查看本地已有的镜像信息、管理镜像标签 使用search命令在远端仓库进行搜索和过滤 删除镜像标签和镜像文件 创建用户定制的镜像并保存为外部文件 向Docker Hub仓库中推送自己的镜像s  一、获取镜像  docker [image] pull NAME[:TAG] #直接从Docker Hub镜像源来下载镜像  其中 [] 中的内容为可选项，NAME为镜像仓库名称（用来区分镜像），TAG为镜像的标签，一般用来
 表示版本信息，描述一个镜像需要“名称+标签”；如果不显式地指定TAG，则默认会选择latest标签，会下
载仓库中的最新镜像。不过，镜像的仓库名称中还应该添加仓库地址（即注册服务器）作为前缀，默认情
况下使用官方的Docker Hub服务（前缀可以忽略的），如果从非官方的仓库下载，则必须指定完整的仓库
地址
 从下载镜像的过程中，可以看到镜像文件一般是由若干层组成的，Docker下载中会获取并输出镜像
 的各层信息，每一层都有一个简写的唯一id。当不同的镜像包括相同的层时，本地仅存储了层的一份内
容，这样可以减少存储空间
 $ docker pull ubuntu Using default tag: latest latest: Pulling from library/ubuntu 5c939e3a4d10: Pull complete c63719cdbe7a: Pull complete 19a861ea6baf: Pull complete 651c9d2d6c4f: Pull complete Digest: sha256:8d31dad0c58f552e890d68bbfb735588b6b820a46e459672d96e585871acc110 Status: Downloaded newer image for ubuntu:latest docker.</description>
    </item>
    
    <item>
      <title>容器技术的前世今生</title>
      <link>https://sin-coder.github.io/post/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%91%E5%B1%95/</link>
      <pubDate>Sat, 01 Feb 2020 03:23:01 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%91%E5%B1%95/</guid>
      <description>容器技术的前世今生 概述  什么是容器，在Docker官方网站中，特地地对这个名词进行了定义，容器是一个标准化的软件单元。
 进一步的解释为容器是打包代码及其所有依赖项的软件的标准单元，它将软件和其运行环境隔离开来，
因此应用程序可以从一个计算环境快速可靠地运行到另一个计算环境。
 可以说Docker是当今最知名的容器平台之一，它于2013年开源，但是容器化和隔离的技术却有很长
 的历史，了解这部分的历史将有助于我们对容器技术的理解
容器发展简史  1979年，Unix7在开发过程中引入了Chroot Jail和Chroot系统调用，它允许用户将进程及其子进程与操作   系统的其余部分隔离开来。但是这种隔离未考虑安全机制，根进程可以轻松地退出chroot
那问题便来了，chroot jail是什么，jail为监狱的意思，似乎要把什么东西锁起来。在类UNIX的操作系统
 上，默认的根目录均为“ / ”，而chroot的作用就是改变正在运行的进程及它的子进程的根目录。例如，将某
个程序的根目录从原先的默认的系统根目录更改为“ /home/ ”，则这个/home目录就变成了这个程序的逻辑
根目录，与此同时，这个被修改了根目录环境的程序就不能再进入这个逻辑根目录之外的路径了。所以这就
相当于限制某个程序能进入的目录树，称为监狱也是情有可原了
 2000年，FreeBSD Jail被引入到FreeBSD OS中，旨在为简单的Chroot文件隔离带来更多的安全性，此   外FreeBSD还实现了将进程及其活动隔离到文件系统的特定视图中（不懂，暂时略过）
  2001年，Linux VServer被推出，它使用了类似chroot的机制与“安全上下文”及操作系统虚拟化来提供虚   拟化解决方案，相比于chroot进步了许多，允许在单个Linux发行版（VPS）上运行多个Linux的发行版
VPS (Virtual Private Servers) ：虚拟专用服务器
  2004年，Oracle推出了Solaris Containers，这是一个用于X86和SPARC处理器的Linux-VServer版本   Solaris Containers是由系统资源控制和“区域”提供的边界隔离组合而成
SPARC是一套RISC（精简指令集）架构
  2005年，OpenVZ推出，它和Linux-VServer一样，使用操作系统级虚拟化，但是这样有一定的限制，容器   共享相同的体系结构和内核版本，当客户需要不同于主机的内核版本时就有点力不从心了；而且
OpenVZ未将一些用于创建隔离的控制机制的补丁集成到内核中
  2007年，Google发布了CGroups，这是一种机制，它能限制和隔离一系列进程的资源使用（如：CPU、   内存、磁盘I/O和网络等），而且被集成到了Linux内核中</description>
    </item>
    
    <item>
      <title>Learn Docker with a picture</title>
      <link>https://sin-coder.github.io/post/docker%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sat, 01 Feb 2020 03:22:01 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/docker%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</guid>
      <description> 一张图入门Docker  关于Docker我们在云计算、虚拟化基础概念和容器技术的前世今生两篇文章中已经介绍过其应用的场景
 和优点，在本篇文章我们将学习Docker的一些基础概念和用法，话不多说，赶紧上图
Docker三大基础概念：镜像、容器和仓库 一、镜像（Image）  镜像就类似于我们使用Virtual Box或者VMware创建虚拟机之前需要下载的系统镜像文件，比如iso文件、
 img文件之类的都称为镜像文件。我们可以将Docker镜像理解为一个面向Docker引擎的只读模板，它自身即
包含了文件系统
 镜像与容器的关系就类似于印钞模板与钞票之间的关系，当然我们可以通过Dockerfile来制作自己的镜像。
 制作好的镜像可以被封装在一个盒子中（保存为tar文件），当需要在另一个环境中使用镜像时，只需将盒子
搬过去，重新取出（Load）镜像即可。当然这些比喻并不十分严格，只是帮助理解而已。
 通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。用户在
 对容器进行修改并提交（commit）后，重新运行依然可以保持这个变化
 有关Docker镜像的操作详解，请参看Docker入门学习--镜像
 二、容器（Container）  容器是从镜像创建的运行实例，可以将其启动（run）、开始、停止和删除，而且这些容器都是相互隔离
 的，互相不可见的。用户可以将容器看做一个简易版的Linux系统环境（包括root用户权限、进程空间、用户
空间和网络空间），以及运行在其中的应用程序打包而成的应用盒子
 镜像本身是可读的，容器从镜像启动的时候，Docker会在镜像的最上层创建一个可写层，镜像本身并没
 有发生改变
 有关Docker镜像的操作详解，请参看Docker入门学习--容器
 三、仓库（Repository）  Docker仓库类似于代码的仓库，是Docker集中存放镜像文件的场所。Docker利用仓库来管理镜像，这
 种设计理念与Git十分相似。用户可以直接从仓库中拉取（pull）镜像来供自己使用，也可以将自行制作镜像
并上传（pull）到仓库中，等到在另外一台机器上使用该镜像时，再pull下来即可
 Docker仓库和注册服务器（Registry）不是同一个概念，注册服务器是存放仓库的地方，其上往往存
 放着多个仓库。每个仓库集中存放某一类的镜像，这些镜像通过Tag进行区分。
 根据所存储镜像的公开与否，Docker仓库可以分为公开仓库和私有仓库。Docker Hub是目前最大的公
 开仓库；当然Docker也支持用户在本地的网络内创建 一个只能自己访问的仓库
 有关Docker镜像的操作详解，请参看Docker入门学习--仓库
当然Docker的内容远不止这些，接下来会 一 一 介绍
 </description>
    </item>
    
    <item>
      <title>云计算和虚拟化基础概念简介</title>
      <link>https://sin-coder.github.io/post/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%92%8C%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 31 Jan 2020 19:21:17 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%92%8C%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/</guid>
      <description>云计算和虚拟化基础概念 一、虚拟化  虚拟化技术是一种资源管理优化技术，它是将计算机的各种物理资源（CPU、内存、磁盘、网卡）
 等I/O设备予以抽象、转换，然后呈现出来一个可供分割并任意组合为一个或多个（虚拟）计算机的配置
环境。虚拟化技术打破了计算机内部实体结构间不可切割的障碍，使得用户以比原来更好的方式来应用
这些计算机的硬件资源。
 虚拟化是一个广义的术语，具体可细分为以下三种：
  平台虚拟化（Platform Virtualization）：操作系统级别的虚拟化
 资源虚拟化（Resouce Virtualization）：特定系统资源的虚拟化，如CPU、内存、存储或者网络等
 应用程序虚拟化（Applocation Virtualization) ：仿真、模拟和解释技术等，如Java虚拟机
  二、虚拟机  虚拟机是一台计算机转换为多台计算机的基于物理硬件的抽象。虚拟机管理程序允许多个虚拟机
 在单台计算机上运行，它可以创建虚拟化硬件，其中包括虚拟磁盘、虚拟网络接口、虚拟CPU等，同
时它还具有可以与此虚拟硬件通信的内核。每个虚拟机都包含着操作系统、应用程序，这些文件可能
占用数十GB的存储空间。管理程序可以进行托管，这就意味着它是可以在主机操作系统上运行的软件、
还可以运行在裸机上，即直接在机器硬件上运行，替换真实的操作系统。
 虚拟机可以分为系统虚拟机或者是过程虚拟机，我们通常所说的是系统虚拟机，它是通过主机硬件
 来模拟整个操作系统的；而“进程虚拟机”是用于模拟执行单个进程的编程环境的，Java虚拟机便是这样
三、容器 1.问题背景  在过去的几年中，让运维人员最为头疼就是需要为各种迥异的开发语言安装相应的运行环境。
 但是Docker的横空出现解决了这一问题，Docker提供了让开发工程师可以将应用和依赖封装到一
个可移植的容器中的能力，这种集装箱式的封装方式，让运维人员和开发人员都能够以Docker所
提供的镜像分发的标准化方式发布应用，打破了异构语言在团队中形成的壁垒
2.容器简介  容器是包含应用程序代码、配置和依赖关系的软件包；它是通过在操作系统级别进行虚拟
 化来使应用程序可移植，从而创建基于内核的隔离的封装系统。容器化运行的应用程序可以放在
任何地方，消除了依赖关系
 当然，作为独立的单元，容器能够在任何操作系统，如Linux、Mac、甚至像Windows这样
 的非UNIX系统中运行。容器还可充当标准化的工作或者计算单元，比如每个容器运行单个Web
服务器、数据库的分片或者单个Spark工作程序，只需要扩展容器的数量就能够便捷地扩展应用
 每个容器都有一个固定的资源配置（CPU、内存、线程数），并且扩展应用程序只需要扩展
 容器的数量即可。容器也是实现微服务架构的一个很好的工具，每个微服务只是一组协作容器
3.容器和虚拟机的区别  容器和虚拟机具有相似的资源隔离和分配优势，但具体功能不同，因为容器虚拟化了操作系统，
 而不是硬件；容器的创建和停止十分迅速，而且对自身资源的需求十分有限，远远低于虚拟机，很
很多时候直接把容器当做应用本身也是没有任何问题的。传统意义上如果说在一台主机上运行一百
个虚拟机那肯定是天方夜谭，可是一台主机运行上千个容器却已经成为了现实
 二者关键性能的区别如下表格：
  容器和虚拟机架构的区别：</description>
    </item>
    
    <item>
      <title>虚拟机的网络连接方式</title>
      <link>https://sin-coder.github.io/post/virtualnetwork/</link>
      <pubDate>Fri, 31 Jan 2020 12:00:31 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/post/virtualnetwork/</guid>
      <description> 虚拟机和主机的网络连接方式  最近在使用VirtualBox安装虚拟机组建集群时，总是会遇到各种网络问题，具体包括虚拟机
 之间的访问、虚拟机和主机之间的访问、虚拟机访问外网等，搞得晕头转向的，所以在此总结
一下虚拟机和主机之间的网络连接方式，以便更进一步的画出集群的网络拓扑图
 在VirtualBox的配置界面，可以看到虚拟机和主机间的网络连接方式有以下几种：网络地址
 转换（NAT）、NAT网络、桥接网卡、内部网络、仅主机（Host-only）网络、通用驱动等，下
面便一一详解
1. NAT模式  NAT方式借助网络地址转换的功能，通过宿主机所在的网络来访问互联网。此种方式下，虚拟
 机的网卡和物理网卡的网络不是在同一个网络中。虚拟机的网卡只是VirtualBox所提供的一个
虚拟网络，并不真实存在于网络中，所以宿主机无法ping通虚拟机，虚拟机彼此间也不通，但
是通过NAT虚拟机可以访问主机、和主机同网络的其他主机和互联网
 不过这里的网络连接方式中有网络地址转换（NAT）和NAT网络，这二者之间又有什么区别呢？
 其实这二者本质是相同的，不过后者是提前创建好的网络，在主界面的管理---&amp;gt;全局设定--&amp;gt;网络
我们可以提前设置一个NAT网络供虚拟机来选用
 总结起来，NAT模式可以节省网段中的IP地址，适合仅需自己使用的虚拟机配置
 2.桥接模式  桥接方式下，虚拟机需要桥接到宿主机的一块网卡上（有线或者无线均可），虚拟机和宿主机
 处于同一网段，真实存在于网络中。虚拟机之间可以互通、虚拟机和网络中的主机也可以互通、
只要主机能上网，虚拟机也可上网，但是这样占用网络中的IP地址
3.host-only模式  host-only模式应该是最为复杂的网络连接模式了，其他几种网络的连接方式通过这种模式的合
 适配置均可实现。我们可以理解为VirtualBox在主机中模拟出一张专供虚拟机使用的网卡，所
有的虚拟机都是连接到网卡上的，我们可以通过设置这张网卡来实现上网和其他功能。
 虚拟机和主机关系，默认不能相互访问，因为不属于同一个IP地址段。但是通过网卡共享、网卡
 桥接等，可以实现虚拟机和主机的相互访问
 虚拟机和虚拟机的关系，默认同一个网段中的虚拟机是可以相互访问的
 4.内部网络  内部网络模式，虚拟机与外网完全断开，虚拟机和主机之间无法相互访问只用于虚拟机
 与虚拟机之间的访问，但前提是在虚拟机在同一网络中，实际配置时两台虚拟机设置为
同一网络名称即可，如下图的配置中使用intnet
5.通用驱动  运行用于选择网卡驱动，实际上很少用到，可忽略
 6.未指定  相当于虚拟机有网卡，但是没有插线，只能ping自己才会通的
 </description>
    </item>
    
  </channel>
</rss>