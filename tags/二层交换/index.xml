<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二层交换 on sin-coder</title>
    <link>https://sin-coder.github.io/tags/%E4%BA%8C%E5%B1%82%E4%BA%A4%E6%8D%A2/</link>
    <description>Recent content in 二层交换 on sin-coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Aug 2019 21:26:25 +0800</lastBuildDate>
    
	<atom:link href="https://sin-coder.github.io/tags/%E4%BA%8C%E5%B1%82%E4%BA%A4%E6%8D%A2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>端口镜像和链路聚合小结</title>
      <link>https://sin-coder.github.io/network/portlink/</link>
      <pubDate>Wed, 07 Aug 2019 21:26:25 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/network/portlink/</guid>
      <description> 端口镜像和链路聚合 一、端口镜像 1.背景需求  监控交换机特定端口的入站或出战报文，流量监测和故障定位
 2.镜像的分类  （1）基于端口的镜像
指定端口的所有数据复制到指定的端口，交换机可以指定入站和出站；以太网交换机支持多对一的镜
 像，即是将多个端口的报文复制到某一个监控端口上
 本地端口镜像：监控主机和观察端口进行直接相连。
远程端口镜像 : 监控主机和观察端口之间通过二层网络或三层网络相联
 二层端口镜像：交换机将镜像端口的报文封装成VLAN、然后通过观察端口将该报文在此VLAN中进行广播
三层端口镜像：GRE报文头来封装和解封装镜像报文，穿透三层网络
 （2）基于流的镜像
只是将匹配访问控制列表的业务流量复制到指定的监控端口。具体可分为流镜像到端口和流镜像到CPU
 二、链路聚合 1.问题背景  网络中某些链路承载的流量非常大，链路存在带宽瓶颈；链路存在端口故障 。而链路聚合就是将多条
 以太网链路进行捆绑，链路冗余、负载分担来解决这些问题的
2.工作模式  （1）手工负载分担模式
允许在聚合组中手工加入多个成员接口，所有接口均处于转发状态，分担负载的流量。Eth-Trunk的
 创建、成员接口的加入都需要手工配置来完成，没有LACP协议报文的参与，通常运用在对端设备不支
持LACP协议的情况之下 该工作模式下的所有接口均处于转发状态
 （2）静态LACP
M：N模式 :M条链路处于活动状态 N条线路非活动状态作为备份链路；当M条链路中出现故障后，系
 统会从N条链路中选择优先级较高的链路接替出现故障的链路同时实现链路负载分担和链路冗余备份的功
能 。利用LACP协议进行聚合参数的协商、确定活动的接口和非活动的接口的链路聚合方式
 静态：手工配置Eth-Trunk成员接口、由LACP协议协商确定活动接口和非活动接口
（3）动态LACP模式
从ETH-TRunk的创建到加入到成员接口都不需要人工的干预，由LACP协议自动协商来完成
 </description>
    </item>
    
    <item>
      <title>STP生成树</title>
      <link>https://sin-coder.github.io/network/stp/</link>
      <pubDate>Tue, 06 Aug 2019 16:12:20 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/network/stp/</guid>
      <description>STP生成树简介  STP:Spanning Tree Protocol ,生成树协议，为什么要生成树呢，因为有环的存在
 1.利用STP可以解决的问题  消除环路：阻塞冗余链路消除网络中可能存在的通信环路 链路备份：当前活动的路径发生故障之后，激活冗余链路备份，进而恢复网络的连通性   STP的正常工作依赖于网桥协议数据单元(BPDU报文)的泛洪
 2.BPDU报文的介绍  其中比较重要的参数有
  ROOT ID：发送此配置BPDU的交换机所认为的根交换机的标识
 ROOT Path Cost： 从发送此配置BPDU的交换机到达根交换机的最短路径总开销，含交换机根端口的开
   销和不发送此配置BPDU的端口的开销
  Bridge Identifier : 发送此配置BPDU的交换机的STP交换机标识
 Port ID : 发送此配置BPDU的交换机端口的STP端口标识
   比较顺序为：RID&amp;gt;RP&amp;gt;BID&amp;gt;PID，且对应的值越小越优先
  桥ID（Bridge ID）: 是交换机的STP标示符，一共8个字节，由2个字节的优先级和6个字节的MAC   地址构成：桥优先级缺省为32768，可以手工修改，MAC地址为交换机的背板MAC网络中Bridge ID最小
的交换机将成为根桥
  路径开销：Path COST，端口路径开销的默认值和取值范围由选定的路径开销算法决定，路径开销与带宽成反比
 端口ID （2字节）= 端口优先级（1字节）+ 端口编号（1字节），缺省优先级128，范围0-255，越小越优。
  3.STP的缺点  STP的短板：所有的vlan都只能使用单侧的链路，这将导致被阻塞端口所在的链路带宽资源浪费</description>
    </item>
    
    <item>
      <title>Vxlan技术简介</title>
      <link>https://sin-coder.github.io/network/vxlan/</link>
      <pubDate>Tue, 06 Aug 2019 15:45:16 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/network/vxlan/</guid>
      <description>Vxlan技术简介 一、Vxlan技术的产生背景  网络隔离的限制：802.1Q中标准中最多支持的4094个VLAN，数量已无法满足在二层网络中虚拟机数量增   长的需求
  虚拟机规模的限制：在大二层网络里，报文通过MAC地址进行转发，MAC地址表容量限制了虚拟机的数量
 虚拟机的迁移受到限制，虚拟机从一台主机上迁移到另一台主机时，也必须依靠二层网络来进行传输
  二、名词解释  VTEP：Virtual TUNNEL END POINTS ，VXLAN隧道的端点，主要用于VXLAN报文的封装和解封装，直   连物理网络，分配的地址为物理网络IP
  VM：虚拟机，虚拟机之间的访问可分为相同VNI下的不同VM、不同VNI下的跨网访问和VXLAN与非VXLAN   之间的跨网访问
  VNI: VXLAN的网络标识,用于区分VXLAN段，一个VNI表示一个租户  三、技术实现  VXLAN的通信原理是将逻辑网络中的数据帧封装在物理网络中进行传输，封装和解封装的过程由VTEP
 节点来完成。VXLAN将逻辑网络中的数据帧添加在VXLAN头部之后就封装在物理网络中的UDP报文进行数
据的传送
四、VXLAN的报文格式 注释：
 OUTER 的UDP端口使用4798，但是可以进行修改
 OUTER的IP头封装：源IP为发送报文的虚拟机所属的VTEP的IP地址，目的IP为目的虚拟机所属的
   VTEP IP地址
  OUTER:SA为发送报文的虚拟机所属的VTEP MAC地址，DA为目的虚拟机所属的VTEP上路由表中的   下一跳MAC地址
  VXLAN header: 24位的VNI，一共可表示2^24个不同的局域网 16777216个不同的网络  参考文章：https://www.cnblogs.com/hbgzy/p/5279269.html</description>
    </item>
    
    <item>
      <title>Vlan详解</title>
      <link>https://sin-coder.github.io/network/vlan/</link>
      <pubDate>Fri, 02 Aug 2019 14:06:13 +0800</pubDate>
      
      <guid>https://sin-coder.github.io/network/vlan/</guid>
      <description>Vlan详解  最近在学习网络时总是卡在了二层交换上，尤其对一些概念不是很理解，在公司里实际上去配置一些设
 备总是出现各种问题，所以下定决心搞透二层vlan中的一些技术，下面是最近总结的一些知识
一、相关概念解释  VLAN: 虚拟局域网，VLAN所指的LAN特指使用路由器分割的网络-也就是指广播域
 MAC地址分类：MAC地址可分为单播、组播和广播三大类，单播MAC地址全球唯一
 MAC地址泛洪：内网中的一台PC向交换机发送大量的伪造的数据帧，当伪造的目的MAC将交换机的MAC
   地址表填充满之后，MAC地址表无法学习到新的MAC导致交换机瘫痪
附：MAC地址表是交换机工作的核心，如果MAC地址表紊乱，则交换机就不能正常工作。
  广播域：指的是广播帧（目标的MAC地址全部为1）所能传递到的范围，也指能够直接通信的范围，不仅   仅是广播帧、多播帧和目标不明的单播帧也能在同一个广播域中通行
  ARP请求：建立IP地址和MAC地址的映射关系
 DHCP：用于自动设置IP地址的协议，当客户机请求DHCP服务器分配IP地址的时候，必须要发出DHCP广播
 RIP协议：是一种路由协议,每隔30秒路由器都会对临近的其他路由器广播一次路由信息，RIP以外的其他路由
   协议使用多播传输路由信息，这也会被交换机泛洪
 二、二层交换机简介 1、主要功能  终端用户的接入、维护自己的MAC地址表、数据帧的转发和过滤、二层环路的避免和链路的冗余性
 2、工作原理  在收到数据帧之后，交换机学习帧的源MAC地址，然后在MAC地址表中查询该帧的目的MAC地址，并
 将数据帧转发出去
3、具体过程  初始情况下，交换机的MAC地址表是空的
 PC1发送数据帧给PC2（PC1已经通过ARP请求获取了PC2的MAC地址）
 交换机在1口接受到该数据帧后，在MAC地址表中查询该帧的目的MAC地址
 MAC地址表中没有对应匹配的MAC地址，则将这个数据帧进行泛洪，同时交换机学习到该帧的源MAC地址
   并创建表项;将源MAC地址与接收该帧的1口进行关联
  除目的主机外的其他的主机会丢弃该数据帧，目的主机回复数据，将自己的MAC地址发往交换机
 此时该数据帧的MAC地址为源主机的MAC地址，交换机在查询到该表项之后，就将数据帧从1口转发出去
 同时交换机学习到目的主机的MAC地址，并在MAC表项中将其与2口进行关联
  4.为什么要使用VLAN  二层交换机只能构建单一的广播域，但是在使用VLAN之后，它能够将网络分割成多个广播域。未分割</description>
    </item>
    
  </channel>
</rss>